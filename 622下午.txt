#include<iostream>
#include<fstream>
#include<string>
#include<sstream>
#include<iomanip>
using namespace std;
class Money
{
    string name;
    float Gwgz,Xjgz,Zwjt,Jxgz,Yfgz,grsds,Shifa;
    char number;
public:
    Money(){};
    Money(char num,string n,float G,float X,float Z,float J,float Y,float T);
    float getShifa();  //实发工资
    friend void main();  //友元函数
};
Money::Money(char num, string n, float G, float X, float Z, float J,float Y,float T)
{
    number=num;//工号
    name=n;//姓名
    Gwgz=G;//岗位工资
    Xjgz=X;//薪级工资
    Zwjt=Z;//职务津贴
    Jxgz=J;//绩效工资
    Yfgz=Y;//应发工资
    Tax=T; //个人所得税
	
}
float Money::getShifa()
{
	Yfgz=Gwgz+Xjgz+Zwjt+Jxgz;
	grsds=
    Shifa=Yfgz-grsds;
    return Shifa;
}
void main()
{
	system("color 0a");
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"------------------------------欢迎来到工资管理系统-----------------------------"<<endl;
	cout<<"------------------------------请选择您需要的操作！-----------------------------"<<endl;
	cout<<"-------------------------操作：------------------------------------------------"<<endl;
	cout<<"-----------------------------(1)数据的录入-------------------------------------"<<endl;
	cout<<"-----------------------------(2)增加员工数据-----------------------------------"<<endl;
	cout<<"-----------------------------(3)删除员工数据-----------------------------------"<<endl;
	cout<<"-----------------------------(4)修改员工数据-----------------------------------"<<endl;
	cout<<"-------------------------查询：------------------------------------------------"<<endl;
	cout<<"-----------------------------(5)按员工号查询-----------------------------------"<<endl;
	cout<<"-----------------------------(6)按姓名查询-------------------------------------"<<endl;
	cout<<"-----------------------------(7)浏览所有学生的数据-----------------------------"<<endl;
	cout<<"-------------------------排序：------------------------------------------------"<<endl;
	cout<<"-----------------------------(8)按实发工资排序---------------------------------"<<endl;
	cout<<"-----------------------------(9)按员工号排序-----------------------------------"<<endl;
	cout<<"-----------------------------(0)退出-------------------------------------------"<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
	cout<<"-------------------------------------------------------------------------------"<<endl;
        cout<<"请输入：";

	//4.8计算个人所得税函数：grsds()
	//以现行税率为标准
	//应纳个人所得税税额=应纳税所得额×适用税率-速算扣除数

	/*级数	应纳税所得额(含税)			    税率(%)	   速算扣除数
	1	不超过500元的					5			
	2	超过500元至2,000元的部分			10			
	3	超过2,000元至5,000元的部分			15			
	4	超过5,000元至20,000元的部分			20			
	5	超过20,000元至40,000元的部分    	        25			
	6	超过40,000元至60,000元的部分		        30			
	7	超过60,000元至80,000元的部分		        35				
	8	超过5,000元至20,000元的部分			40			
	9	超过20,000元至40,000元的部分	 	        45	*/

void read()
	{
     FILE *fp;
     int n,num;
     if((fp=fopen("gx.dat","rb"))==NULL)
     {
         printf("不能打开gx文件\n");
         exit(1);
     }
	 printf("请输入工资数额:");
     scanf("%d",&num);
     printf("工号、姓名、岗位工资、薪级工资、职务津贴、绩效工资、应发工资、个人所得税、实发工资\n");
     for(
		 n=0;fread(&gz[n],sizeof(struct gongzi),1,fp)!=0;
		 n++
	     )
     if(gz[n].wage4>=num);
     printf("%6d%6s%9s%4s%5d   %.1f   %.1f  %.1f   %.1f   %.1f   %.1f\n",n+1,gz[n].num,gz[n].name,gz[n].wage1,
             gz[n].wage2,gz[n].allowance,gz[n].insurance,gz[n].wage3,gz[n].tax,gz[n].wage4);
     fclose(fp);
}


void write(int m)  /*保存文件函数*/
{
 	int i;
 	FILE*fp;   //声明fp指针，用来指向FILE类型的对象
 	if ((fp=fopen("gz.dat","wb"))==NULL) //打开职工列表文件为空
 	{
  	printf ("打开失败\n");
     	exit(0);
 	}
 
for (i=0;i<m;i++) /*将内存中职工的信息输出到磁盘文件中去*/
   	if (fwrite(&gz[i],sizeof(struct gongzi),1,fp)!=1)//写入数据块   &gz[i]：是要输出数据的地址  sizeof(struct clerk)：获取一个单体的长度  1：数据项的个数  fp：目标文件指针
   	printf("文件读写错误\n");
   	fclose(fp);// 缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区
} 